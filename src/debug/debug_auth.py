import asyncio
import bcrypt
from sqlalchemy import select

from src.database import create_db_and_tables, AsyncSessionLocal
from src.models.user import User


async def debug_authentication():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîç Debugging authentication system...")

    await create_db_and_tables()

    async with AsyncSessionLocal() as session:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\n1Ô∏è‚É£ Checking all users in database:")
            result = await session.scalars(select(User))
            users = result.all()

            if not users:
                print("‚ùå No users found in database!")
                print("üí° Create a superuser first using create_superuser.py")
                return

            for user in users:
                print(
                    f"   üë§ {user.username} | Email: {user.email or 'None'} | Superuser: {user.is_superuser} | Active: {user.is_active}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\n2Ô∏è‚É£ Checking superusers:")
            superusers = await session.scalars(
                select(User).filter_by(is_superuser=True, is_active=True)
            )
            superuser_list = superusers.all()

            if not superuser_list:
                print("‚ùå No active superusers found!")
                print("üí° You need at least one active superuser to access admin")
                return

            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            print("\n3Ô∏è‚É£ Testing authentication:")
            test_user = superuser_list[0]

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_password = input(f"Enter password for '{test_user.username}' to test: ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            password_valid = bcrypt.checkpw(test_password.encode(), test_user.hashed_password.encode())
            print(f"üîë Password validation: {'‚úÖ Valid' if password_valid else '‚ùå Invalid'}")

            if password_valid:
                print(f"‚úÖ Authentication should work for user: {test_user.username}")
            else:
                print(f"‚ùå Password incorrect for user: {test_user.username}")

            # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"\n4Ô∏è‚É£ Password hash info:")
            print(f"   Hash: {test_user.hashed_password[:50]}...")
            print(f"   Hash length: {len(test_user.hashed_password)}")
            print(f"   Starts with $2b$: {test_user.hashed_password.startswith('$2b$')}")

        except Exception as e:
            print(f"‚ùå Error during debug: {e}")
            import traceback
            traceback.print_exc()


async def create_test_superuser():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üîß Creating test superuser...")

    await create_db_and_tables()

    username = "admin1"
    password = "admin12345"
    email = "admin@example.comm"

    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hash_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

    async with AsyncSessionLocal() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            existing = await session.scalars(
                select(User).filter_by(username=username)
            )
            if existing.first():
                print(f"‚ùå User '{username}' already exists!")
                return

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                username=username,
                email=email,
                hash_password=hash_password,
                is_superuser=True,
                is_active=True
            )

            session.add(user)
            await session.commit()

            print(f"‚úÖ Test superuser created:")
            print(f"   Username: {username}")
            print(f"   Password: {password}")
            print(f"   Email: {email}")
            print(f"   ID: {user.id}")

        except Exception as e:
            print(f"‚ùå Error creating test user: {e}")
            await session.rollback()


async def test_fastadmin_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ FastAdmin"""
    print("üß™ Testing FastAdmin authentication method...")

    from src.admin.admin import UserAdmin

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω–∫–∏
    admin = UserAdmin()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    username = input("Username: ")
    password = input("Password: ")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ authenticate
        result = await admin.authenticate(username, password)

        if result:
            print(f"‚úÖ Authentication successful! User ID: {result}")
        else:
            print("‚ùå Authentication failed!")

    except Exception as e:
        print(f"‚ùå Error in authenticate method: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üéØ FastAdmin Authentication Debugger")
    print("=" * 50)

    while True:
        print("\nOptions:")
        print("1. Debug authentication system")
        print("2. Create test superuser (admin/admin123)")
        print("3. Test FastAdmin authentication method")
        print("4. Exit")

        choice = input("\nSelect option (1-4): ").strip()

        if choice == "1":
            await debug_authentication()
        elif choice == "2":
            await create_test_superuser()
        elif choice == "3":
            await test_fastadmin_auth()
        elif choice == "4":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid option. Please select 1-4.")


if __name__ == "__main__":
    asyncio.run(main())