from src.pipeline.elements.base import Tool


class PromptGenerator(Tool):
    """Класс для генерации промптов."""

    def __init__(
        self,
        name: str = "PromptGenerator",
        description: str = "Генерирует промпт для LLM.",
        **kwargs,
    ):
        super().__init__(name=name, description=description, **kwargs)
        self.text = kwargs.get("text", "")

    def run(self) -> str:
        """Возвращает специализированный промпт для конкретного типа документа."""

        prompts = {
            "primary": f"""Ты - эксперт по созданию технических задач для IT-команды. На основе входных данных создай структурированный план разработки с задачами.
                Формат выходных данных
                Структура задачи:
                ### TASK-XXX: [Краткое название]
                **Приоритет:** [High/Medium/Low]
                **Исполнитель:** [Имя] ([Роль])
                **Время выполнения:** [X] дней
                **Описание:** [Краткое описание в 1-2 предложения]
                **Acceptance Criteria:**
                - [Критерий 1]
                - [Критерий 2]
                - [Критерий 3]
                **Зависимости:** [TASK-XXX или "Нет"]

                ---
                Принципы создания:

                Нумерация задач по ролям:

                Backend: TASK-0XX
                Frontend: TASK-1XX
                QA: TASK-2XX
                PM: TASK-3XX

                Краткость и ясность:

                Описание: максимум 2 предложения
                Критерии: 3-5 пунктов
                Реалистичные временные оценки

                Обязательные типы задач:

                Mock API для фронтенда
                Основные API endpoints
                UI компоненты
                Тестирование
                Документация


                Временные оценки:

                Простые: 1-3 дня
                Средние: 3-5 дней
                Сложные: 5-7 дней

                Требования к качеству:

                Всего 8-12 задач (не больше!)
                Конкретные технические критерии
                Четкие зависимости между задачами
                Реалистичные временные рамки

                Начинай ответ с: "Предлагаю создать следующие задачи:"
                Создавай краткий, но полный план разработки готовый к использованию без контекста.

                Текст обсуждения следующий: f"{self.text}"
            """
        }

        return prompts["primary"]
