// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const fileInput = document.getElementById('fileInput');
const uploadArea = document.getElementById('uploadArea');
const uploadBtn = document.getElementById('uploadBtn');
const uploadIcon = document.getElementById('uploadIcon');
const uploadText = document.getElementById('uploadText');
const processingIndicator = document.getElementById('processingIndicator');
const message = document.getElementById('message');
const resultsSection = document.getElementById('resultsSection');
const resultsList = document.getElementById('resultsList');

let isProcessing = false;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    allowedTypes: [
        'text/plain', 'text/markdown', 'text/x-markdown',
        'application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'image/jpeg', 'image/jpg', 'image/png', 'image/tiff', 'image/bmp',
        'audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/x-wav', 'audio/mp4', 'audio/x-m4a',
        'audio/ogg', 'audio/x-flac', 'audio/flac'
    ],
    allowedExtensions: [
        '.txt', '.md', '.pdf', '.docx',
        '.jpg', '.jpeg', '.png', '.tiff', '.bmp',
        '.mp3', '.wav', '.m4a', '.ogg', '.flac'
    ],
    fileIcons: {
        '.pdf': 'üìï',
        '.docx': 'üìò',
        '.txt': 'üìù',
        '.md': 'üìã',
        '.mp3': 'üéµ',
        '.wav': 'üé∂',
        '.m4a': 'üé§',
        '.ogg': 'üéß',
        '.flac': 'üéº',
        'image': 'üñºÔ∏è',
        'default': 'üìÑ',
        'error': '‚ùó',
    }
};

// –£—Ç–∏–ª–∏—Ç—ã
const Utils = {
    getErrorMessage(error) {
        if (typeof error === 'string') return error;
        if (error?.message) return error.message;
        if (error?.detail) {
            if (typeof error.detail === 'string') return error.detail;
            if (Array.isArray(error.detail)) {
                return error.detail.map(err => {
                    const field = err.loc ? err.loc.join('.') : 'field';
                    const message = err.msg || err.message || 'validation error';
                    return `${field}: ${message}`;
                }).join('; ');
            }
            return JSON.stringify(error.detail, null, 2);
        }
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    },

    getFileIcon(fileName) {
        const name = fileName.toLowerCase();
        if (name.endsWith('.pdf')) return CONFIG.fileIcons['.pdf'];
        if (name.endsWith('.docx')) return CONFIG.fileIcons['.docx'];
        if (name.endsWith('.txt')) return CONFIG.fileIcons['.txt'];
        if (name.endsWith('.md')) return CONFIG.fileIcons['.md'];
        if (name.match(/\.(jpg|jpeg|png|tiff|bmp)$/)) return CONFIG.fileIcons['image'];
        return CONFIG.fileIcons['default'];
    },

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },

    isValidFile(file) {
        const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
        return CONFIG.allowedTypes.includes(file.type) || CONFIG.allowedExtensions.includes(fileExtension);
    },

    formatContent(content) {
        if (Array.isArray(content)) return content.join('\n');
        if (typeof content === 'object' && content !== null) return JSON.stringify(content, null, 2);
        return content;
    }
};

// UI —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
const UI = {
    setProcessingState(processing) {
        isProcessing = processing;

        if (processing) {
            uploadArea.classList.add('processing');
            uploadBtn.disabled = true;
            uploadBtn.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
            uploadIcon.textContent = '‚è≥';
            uploadText.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç...';
            processingIndicator.style.display = 'block';
        } else {
            uploadArea.classList.remove('processing');
            uploadBtn.disabled = false;
            uploadBtn.textContent = '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª';
            uploadIcon.textContent = 'üìÑ';
            uploadText.textContent = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª';
            processingIndicator.style.display = 'none';
        }
    },

    showMessage(text, type) {
        message.innerHTML = `<div class="message ${type}">${text}</div>`;
        setTimeout(() => {
            if (type !== 'error') {
                this.clearMessage();
            }
        }, 5000);
    },

    clearMessage() {
        message.innerHTML = '';
    },

    showResult(result) {
        const fileIcon = Utils.getFileIcon(result.document_name);
        const summaryContent = Utils.formatContent(result.summary);
        const resultId = `result-${Date.now()}`;
        const summaryId = `summary-${Date.now()}`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Jira (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
        const jiraHTML = `
            <div class="jira-placeholder" id="jira-${resultId}" style="display: none;">
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Jira –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" -->
            </div>
        `;

        const resultHTML = `
            <div class="result-card" id="${resultId}">
                <div class="result-header">
                    <div class="document-name">${fileIcon} ${Utils.escapeHtml(result.document_name)}</div>
                    <div class="model-badge">ü§ñ ${result.model}</div>
                </div>
                
                <div class="summary-label">–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</div>
                <div class="summary-content" id="${summaryId}">
                    ${Utils.escapeHtml(summaryContent).replace(/\n/g, '<br>')}
                </div>
                
                ${jiraHTML}
                
                <div class="action-buttons">
                    <button class="copy-btn" onclick="Actions.copySummary('${summaryId}')">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
                    </button>
                    <button class="feedback-btn accept-btn" onclick="Actions.createJiraTasks('${resultId}')">
                        ‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Jira
                    </button>
                    <button class="feedback-btn reject-btn" onclick="Actions.giveFeedback('${resultId}', 'reject')">
                        ‚ùå –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    </button>
                </div>
                
                <div class="status-indicator" id="status-${resultId}" style="display: none;"></div>
            </div>
        `;

        resultsList.innerHTML = resultHTML + resultsList.innerHTML;
        resultsSection.style.display = 'block';

        setTimeout(() => {
            resultsSection.scrollIntoView({behavior: 'smooth', block: 'start'});
        }, 100);
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
    getTaskWord(count) {
        if (count % 10 === 1 && count % 100 !== 11) return '–∑–∞–¥–∞—á–∞';
        if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–∑–∞–¥–∞—á–∏';
        return '–∑–∞–¥–∞—á';
    },

    getErrorWord(count) {
        if (count % 10 === 1 && count % 100 !== 11) return '–æ—à–∏–±–∫–∞';
        if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–æ—à–∏–±–∫–∏';
        return '–æ—à–∏–±–æ–∫';
    },

    getStatusClass(jiraResult) {
        if (!jiraResult) return 'status-info';
        if (jiraResult.success && jiraResult.created_tasks?.length > 0) return 'status-success';
        if (jiraResult.errors?.length > 0) return 'status-error';
        return 'status-warning';
    }
};

// –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
const Actions = {
    async processFile() {
        const file = fileInput.files[0];
        if (!file) return;

        if (!Utils.isValidFile(file)) {
            UI.showMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF, DOCX, TXT, MD –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, TIFF, BMP).', 'error');
            return;
        }

        UI.setProcessingState(true);
        UI.clearMessage();

        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('/file/process', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (response.ok && result.success) {
                UI.showResult(result);
                UI.showMessage('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ù–∞–∂–º–∏—Ç–µ "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Jira', 'success');
            } else {
                throw new Error(Utils.getErrorMessage(result));
            }
        } catch (error) {
            UI.showMessage(`–û—à–∏–±–∫–∞: ${Utils.getErrorMessage(error)}`, 'error');
            console.error('Processing error:', error);
        } finally {
            UI.setProcessingState(false);
            fileInput.value = '';
        }
    },

    copySummary(elementId) {
        const element = document.getElementById(elementId);
        const text = element.textContent || element.innerText;

        navigator.clipboard.writeText(text).then(() => {
            UI.showMessage('–ó–∞–¥–∞—á–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }).catch(() => {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            UI.showMessage('–ó–∞–¥–∞—á–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        });
    },

    async createJiraTasks(resultId) {
        const resultCard = document.getElementById(resultId);
        const buttons = resultCard.querySelectorAll('.feedback-btn');
        const acceptBtn = resultCard.querySelector('.accept-btn');
        const jiraPlaceholder = document.getElementById(`jira-${resultId}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á
        const summaryElement = resultCard.querySelector('.summary-content');
        const tasksText = summaryElement ? (summaryElement.textContent || summaryElement.innerText) : '';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        acceptBtn.innerHTML = '‚è≥ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ Jira...';
        buttons.forEach(btn => btn.disabled = true);

        try {
            const requestData = {
                result_id: resultId,
                tasks_text: tasksText,
                project_key: 'LEARNJIRA',
                epic_key: ''
            };

            console.log('–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ Jira:', requestData);

            const response = await fetch('/file/accept', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(requestData)
            });

            const result = await response.json();
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            if (response.ok && result.success && result.jira_result) {
                // –°–æ–∑–¥–∞–µ–º HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Jira
                const createdCount = result.jira_result.created_tasks?.length || 0;
                const errorsCount = result.jira_result.errors?.length || 0;

                let jiraHTML = '';
                let statusMessage = '';

                if (result.jira_result.success && createdCount > 0) {
                    jiraHTML = `
                        <div class="jira-success">
                            <h4>‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á –≤ Jira: ${createdCount}</h4>
                            <div class="jira-tasks-list">
                                ${result.jira_result.created_tasks.map((task, index) => `
                                    <div class="jira-task-item">
                                        <span class="task-number">${index + 1}.</span>
                                        <a href="${task.url}" target="_blank" class="jira-task-link">
                                            üéØ <strong>${task.key}</strong>: ${Utils.escapeHtml(task.title)}
                                        </a>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;

                    statusMessage = `–°–æ–∑–¥–∞–Ω–æ ${createdCount} ${UI.getTaskWord(createdCount)} –≤ Jira`;
                } else if (createdCount === 0 && errorsCount > 0) {
                    jiraHTML = `
                        <div class="jira-error">
                            <h4>‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (${errorsCount} ${UI.getErrorWord(errorsCount)})</h4>
                        </div>
                    `;
                    statusMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Jira`;
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (errorsCount > 0) {
                    jiraHTML += `
                        <div class="jira-warnings">
                            <h4>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (${errorsCount}):</h4>
                            <ul>
                                ${result.jira_result.errors.map((error, index) => 
                                    `<li><strong>${index + 1}.</strong> ${Utils.escapeHtml(error)}</li>`
                                ).join('')}
                            </ul>
                        </div>
                    `;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π –±–µ–π–¥–∂
                jiraHTML += `
                    <div class="result-summary">
                        <div class="status-badge ${UI.getStatusClass(result.jira_result)}">
                            ${statusMessage}
                        </div>
                    </div>
                `;

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                jiraPlaceholder.innerHTML = jiraHTML;
                jiraPlaceholder.style.display = 'block';

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                acceptBtn.innerHTML = '‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ Jira';
                acceptBtn.style.opacity = '0.7';

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                resultCard.classList.add('feedback-positive');

                UI.showMessage(result.message || `–°–æ–∑–¥–∞–Ω–æ ${createdCount} ${UI.getTaskWord(createdCount)} –≤ Jira!`, 'success');

            } else {
                throw new Error(Utils.getErrorMessage(result) || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Jira');
            }
        } catch (error) {
            console.error('Jira creation error:', error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ placeholder
            jiraPlaceholder.innerHTML = `
                <div class="jira-error">
                    <h4>‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á</h4>
                    <p>${Utils.getErrorMessage(error)}</p>
                </div>
            `;
            jiraPlaceholder.style.display = 'block';

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            acceptBtn.innerHTML = '‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Jira';
            buttons.forEach(btn => btn.disabled = false);

            UI.showMessage(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á: ${Utils.getErrorMessage(error)}`, 'error');
        }
    },

    async giveFeedback(resultId, feedbackType) {
        const resultCard = document.getElementById(resultId);
        const buttons = resultCard.querySelectorAll('.feedback-btn');
        const targetButton = resultCard.querySelector(`.${feedbackType}-btn`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        targetButton.innerHTML = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
        buttons.forEach(btn => btn.disabled = true);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const summaryElement = resultCard.querySelector('.summary-content');
            const tasksText = summaryElement ? (summaryElement.textContent || summaryElement.innerText) : '';

            const requestData = {
                result_id: resultId,
                tasks_text: tasksText,
                feedback_type: feedbackType,
                reason: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                timestamp: new Date().toISOString()
            };

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:', requestData);

            const response = await fetch('/file/reject', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(requestData)
            });

            const result = await response.json();
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            if (response.ok && result.success) {
                targetButton.innerHTML = '‚ùå –£—á—Ç–µ–Ω–æ';
                targetButton.style.opacity = '0.7';

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                resultCard.classList.add('feedback-negative');

                UI.showMessage(result.message || '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—á—Ç–µ–Ω–∞!', 'success');
            } else {
                throw new Error(Utils.getErrorMessage(result) || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
            }
        } catch (error) {
            console.error('Feedback error:', error);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            targetButton.innerHTML = 'üëé –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
            buttons.forEach(btn => btn.disabled = false);

            UI.showMessage(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${Utils.getErrorMessage(error)}`, 'error');
        }
    }
};

// Drag & Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const DragDrop = {
    handleDragOver(e) {
        e.preventDefault();
        if (!isProcessing) {
            uploadArea.classList.add('dragover');
        }
    },

    handleDragLeave(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
    },

    handleDrop(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');

        if (isProcessing) return;

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            fileInput.files = files;
            Actions.processFile();
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
function initializeEventListeners() {
    fileInput.addEventListener('change', Actions.processFile);
    uploadArea.addEventListener('dragover', DragDrop.handleDragOver);
    uploadArea.addEventListener('dragleave', DragDrop.handleDragLeave);
    uploadArea.addEventListener('drop', DragDrop.handleDrop);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initializeEventListeners);