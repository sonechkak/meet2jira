const fileInput = document.getElementById('fileInput');
const uploadArea = document.getElementById('uploadArea');
const uploadBtn = document.getElementById('uploadBtn');
const uploadIcon = document.getElementById('uploadIcon');
const uploadText = document.getElementById('uploadText');
const processingIndicator = document.getElementById('processingIndicator');
const message = document.getElementById('message');
const resultsSection = document.getElementById('resultsSection');
const resultsList = document.getElementById('resultsList');

let isProcessing = false;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
fileInput.addEventListener('change', processFile);

// Drag & Drop
uploadArea.addEventListener('dragover', handleDragOver);
uploadArea.addEventListener('dragleave', handleDragLeave);
uploadArea.addEventListener('drop', handleDrop);

function handleDragOver(e) {
    e.preventDefault();
    if (!isProcessing) {
        uploadArea.classList.add('dragover');
    }
}

function handleDragLeave(e) {
    e.preventDefault();
    uploadArea.classList.remove('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    uploadArea.classList.remove('dragover');

    if (isProcessing) return;

    const files = e.dataTransfer.files;
    if (files.length > 0) {
        fileInput.files = files;
        processFile();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
async function processFile() {
    const file = fileInput.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = [
        'text/plain',
        'text/markdown',
        'text/x-markdown',
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'image/jpeg',
        'image/jpg',
        'image/png',
        'image/tiff',
        'image/bmp'
    ];

    const allowedExtensions = ['.txt', '.md', '.pdf', '.docx', '.jpg', '.jpeg', '.png', '.tiff', '.bmp'];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ MIME —Ç–∏–ø—É –∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
    const isValidType = allowedTypes.includes(file.type) || allowedExtensions.includes(fileExtension);

    if (!isValidType) {
        showMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF, DOCX, TXT, MD –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, TIFF, BMP).', 'error');
        return;
    }

    setProcessingState(true);
    clearMessage();

    const formData = new FormData();
    formData.append('file', file);

    try {
        const response = await fetch('/file/process', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (response.ok && result.success) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–≤–æ–µ–≥–æ API
            showResult({
                summary: result.summary,
                document_name: result.document_name,
                model: result.model
            });
            showMessage('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!', 'success');
        } else {
            throw new Error(result.detail || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        }
    } catch (error) {
        showMessage(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        console.error('Processing error:', error);
    } finally {
        setProcessingState(false);
        fileInput.value = '';
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
function setProcessingState(processing) {
    isProcessing = processing;

    if (processing) {
        uploadArea.classList.add('processing');
        uploadBtn.disabled = true;
        uploadBtn.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
        uploadIcon.textContent = '‚è≥';
        uploadText.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç...';
        processingIndicator.style.display = 'block';
    } else {
        uploadArea.classList.remove('processing');
        uploadBtn.disabled = false;
        uploadBtn.textContent = '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª';
        uploadIcon.textContent = 'üìÑ';
        uploadText.textContent = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª';
        processingIndicator.style.display = 'none';
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
function showResult(result) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    const fileName = result.document_name.toLowerCase();
    let fileIcon = 'üìÑ';

    if (fileName.endsWith('.pdf')) fileIcon = 'üìï';
    else if (fileName.endsWith('.docx')) fileIcon = 'üìò';
    else if (fileName.endsWith('.txt')) fileIcon = 'üìù';
    else if (fileName.endsWith('.md')) fileIcon = 'üìã';
    else if (fileName.match(/\.(jpg|jpeg|png|tiff|bmp)$/)) fileIcon = 'üñºÔ∏è';

    let summaryContent = result.summary;
    if (Array.isArray(summaryContent)) {
        summaryContent = summaryContent.join('\n');
    } else if (typeof summaryContent === 'object' && summaryContent !== null) {
        summaryContent = JSON.stringify(summaryContent, null, 2);
    }

    const resultId = `result-${Date.now()}`;
    const summaryId = `summary-${Date.now()}`;

    const resultHTML = `
        <div class="result-card" id="${resultId}">
            <div class="result-header">
                <div class="document-name">${fileIcon} ${escapeHtml(result.document_name)}</div>
                <div class="model-badge">ü§ñ ${result.model}</div>
            </div>
            
            <div class="summary-label">–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏:</div>
            <div class="summary-content" id="${summaryId}">
                ${escapeHtml(summaryContent).replace(/\n/g, '<br>')}
            </div>
            
            <div class="action-buttons">
                <button class="copy-btn" onclick="copySummary('${summaryId}')">
                    üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                </button>
                <button class="accept-btn" onclick="acceptResult('${resultId}')">
                    ‚úÖ Accept
                </button>
                <button class="reject-btn" onclick="rejectResult('${resultId}')">
                    ‚ùå Reject
                </button>
            </div>
            
            <div class="status-indicator" id="status-${resultId}" style="display: none;"></div>
        </div>
    `;

    resultsList.innerHTML = resultHTML + resultsList.innerHTML;
    resultsSection.style.display = 'block';

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    setTimeout(() => {
        resultsSection.scrollIntoView({behavior: 'smooth', block: 'start'});
    }, 100);
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
function copySummary(elementId) {
    const element = document.getElementById(elementId);
    const text = element.textContent || element.innerText;

    navigator.clipboard.writeText(text).then(() => {
        showMessage('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showMessage('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    });
}

// –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function acceptResult(resultId) {
    const resultCard = document.getElementById(resultId);
    const statusIndicator = document.getElementById(`status-${resultId}`);
    const acceptBtn = resultCard.querySelector('.accept-btn');
    const rejectBtn = resultCard.querySelector('.reject-btn');

    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    resultCard.classList.add('accepted');
    statusIndicator.innerHTML = '<div class="status-accepted">‚úÖ –ü—Ä–∏–Ω—è—Ç–æ</div>';
    statusIndicator.style.display = 'block';

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    acceptBtn.disabled = true;
    rejectBtn.disabled = true;
    acceptBtn.style.opacity = '0.5';
    rejectBtn.style.opacity = '0.5';

    showMessage('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç!', 'success');

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendResultStatus(resultId, 'accepted');
}

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function rejectResult(resultId) {
    const resultCard = document.getElementById(resultId);
    const statusIndicator = document.getElementById(`status-${resultId}`);
    const acceptBtn = resultCard.querySelector('.accept-btn');
    const rejectBtn = resultCard.querySelector('.reject-btn');

    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    resultCard.classList.add('rejected');
    statusIndicator.innerHTML = '<div class="status-rejected">‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ</div>';
    statusIndicator.style.display = 'block';

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    acceptBtn.disabled = true;
    rejectBtn.disabled = true;
    acceptBtn.style.opacity = '0.5';
    rejectBtn.style.opacity = '0.5';

    showMessage('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'error');

    sendResultStatus(resultId, 'rejected');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function sendResultStatus(resultId, status) {
    try {
        console.log(`–°—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${resultId}: ${status}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
function showMessage(text, type) {
    message.innerHTML = `<div class="message ${type}">${text}</div>`;
    setTimeout(() => {
        if (type !== 'error') {
            clearMessage();
        }
    }, 5000);
}

function clearMessage() {
    message.innerHTML = '';
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}